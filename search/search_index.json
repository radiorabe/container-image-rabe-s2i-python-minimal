{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RaBe S2I Python Minimal Image","text":"<p>The RaBe S2I Python Minimal Image resembles a classic sclorg/s2i-python image with the main difference being that it is based on the RaBe UBI8 Minimal Image. It's main use if as a build container for building wheels. </p> <p>The image is based on the RaBe S2I Base Image and RaBe S2I Core Image which is in turn based on the Red Hat Universal Base Image 8 Minimal container provided by Red Hat via RaBe Universal Base Image 8 Minimal.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Based on RaBe Universal Base Image 8 Minimal</li> <li>Contains the latest python and a pip with wheels support</li> <li>Build wheels for installing into RaBe Python Base Image Minimal</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Create a multistage Dockerfile using both <code>s2i-python</code> and <code>python-minimal</code> as bases. Replace <code>latest</code> with exact versions in the following example.</p> <pre><code>FROM ghcr.io/radiorabe/s2i-python:latest AS build\nCOPY ./ /opt/app-root/src\n\nRUN python3 setup.py bdist_wheel\n\nFROM gchr.io/radiorabe/python-minimal:latest AS app\nCOPY --from=build /opt/app-root/src/dist/*.whl /tmp/dist/\n\nRUN    python3 -mpip --no-cache-dir install /tmp/dist/*.whl \\\n&amp;&amp; rm -rf /tmp/dist/\n\nUSER nobody\nCMD [\"python3\", \"-mapp\"]\n</code></pre>"},{"location":"#release-management","title":"Release Management","text":"<p>The CI/CD setup uses semantic commit messages following the conventional commits standard. There is a GitHub Action in .github/workflows/semantic-release.yaml that uses go-semantic-commit to create new releases.</p> <p>The commit message should be structured as follows:</p> <pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>The commit contains the following structural elements, to communicate intent to the consumers of your library:</p> <ol> <li>fix: a commit of the type <code>fix</code> patches gets released with a PATCH version bump</li> <li>feat: a commit of the type <code>feat</code> gets released as a MINOR version bump</li> <li>BREAKING CHANGE: a commit that has a footer <code>BREAKING CHANGE:</code> gets released as a MAJOR version bump</li> <li>types other than <code>fix:</code> and <code>feat:</code> are allowed and don't trigger a release</li> </ol> <p>If a commit does not contain a conventional commit style message you can fix it during the squash and merge operation on the PR.</p>"},{"location":"#build-process","title":"Build Process","text":"<p>The CI/CD setup uses the Docker build-push Action to publish container images. This is managed in .github/workflows/release.yaml.</p>"},{"location":"#license","title":"License","text":"<p>This application is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, version 3 of the License.</p>"},{"location":"#copyright","title":"Copyright","text":"<p>Copyright (c) 2022 Radio Bern RaBe</p>"}]}